// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ViterbiHMM
List ViterbiHMM(List x, CharacterVector y, bool logspace);
RcppExport SEXP profile_ViterbiHMM(SEXP xSEXP, SEXP ySEXP, SEXP logspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type logspace(logspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(ViterbiHMM(x, y, logspace));
    return rcpp_result_gen;
END_RCPP
}
// ViterbiPHMM
List ViterbiPHMM(List x, CharacterVector y, bool logspace);
RcppExport SEXP profile_ViterbiPHMM(SEXP xSEXP, SEXP ySEXP, SEXP logspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type logspace(logspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(ViterbiPHMM(x, y, logspace));
    return rcpp_result_gen;
END_RCPP
}
// kdist
NumericVector kdist(List x, int k, bool asmatrix);
RcppExport SEXP profile_kdist(SEXP xSEXP, SEXP kSEXP, SEXP asmatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type asmatrix(asmatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(kdist(x, k, asmatrix));
    return rcpp_result_gen;
END_RCPP
}
// kdistDNA
NumericVector kdistDNA(List x, int k, bool asmatrix);
RcppExport SEXP profile_kdistDNA(SEXP xSEXP, SEXP kSEXP, SEXP asmatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type asmatrix(asmatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(kdistDNA(x, k, asmatrix));
    return rcpp_result_gen;
END_RCPP
}
// logsum
double logsum(NumericVector x);
RcppExport SEXP profile_logsum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logsum(x));
    return rcpp_result_gen;
END_RCPP
}
// forwardC
List forwardC(List x, CharacterVector y, bool logspace);
RcppExport SEXP profile_forwardC(SEXP xSEXP, SEXP ySEXP, SEXP logspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type logspace(logspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(forwardC(x, y, logspace));
    return rcpp_result_gen;
END_RCPP
}
// backwardC
List backwardC(List x, CharacterVector y, bool logspace);
RcppExport SEXP profile_backwardC(SEXP xSEXP, SEXP ySEXP, SEXP logspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type logspace(logspaceSEXP);
    rcpp_result_gen = Rcpp::wrap(backwardC(x, y, logspace));
    return rcpp_result_gen;
END_RCPP
}
// returnmod
List returnmod(List x);
RcppExport SEXP profile_returnmod(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(returnmod(x));
    return rcpp_result_gen;
END_RCPP
}
// transcount
IntegerVector transcount(IntegerVector x, int numbersystem);
RcppExport SEXP profile_transcount(SEXP xSEXP, SEXP numbersystemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type numbersystem(numbersystemSEXP);
    rcpp_result_gen = Rcpp::wrap(transcount(x, numbersystem));
    return rcpp_result_gen;
END_RCPP
}
// tab9C
NumericMatrix tab9C(IntegerMatrix x, NumericVector seqweights);
RcppExport SEXP profile_tab9C(SEXP xSEXP, SEXP seqweightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type seqweights(seqweightsSEXP);
    rcpp_result_gen = Rcpp::wrap(tab9C(x, seqweights));
    return rcpp_result_gen;
END_RCPP
}
// DNAprobC
double DNAprobC(RawVector a, NumericVector probs);
RcppExport SEXP profile_DNAprobC(SEXP aSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(DNAprobC(a, probs));
    return rcpp_result_gen;
END_RCPP
}
